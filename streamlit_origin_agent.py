import streamlit as st
import os
import json
import hashlib
from pathlib import Path
from datetime import datetime
from typing import List, Tuple, Optional
import time

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Origin Software Agent",
    page_icon="üß™",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado
st.markdown("""
<style>
.main > div {
    padding-top: 2rem;
}
.stChat > div {
    background-color: #f8f9fa;
}
</style>
""", unsafe_allow_html=True)

@st.cache_data
def load_documentation():
    """Carrega documenta√ß√£o com cache do Streamlit"""
    docs_content = """
    ORIGIN SOFTWARE - GUIA ESSENCIAL

    INTRODU√á√ÉO:
    Origin √© um software profissional para an√°lise de dados e cria√ß√£o de gr√°ficos cient√≠ficos.
    Desenvolvido pela OriginLab Corporation, √© amplamente usado em pesquisa e ind√∫stria.

    PRINCIPAIS RECURSOS:
    ‚Ä¢ Importa√ß√£o de dados (Excel, CSV, ASCII, bancos de dados)
    ‚Ä¢ Gr√°ficos 2D e 3D profissionais
    ‚Ä¢ An√°lise estat√≠stica avan√ßada
    ‚Ä¢ Fitting de curvas e superf√≠cies
    ‚Ä¢ An√°lise de sinais (FFT, filtros)
    ‚Ä¢ Programa√ß√£o em LabTalk e Origin C
    ‚Ä¢ Templates e batch processing
    ‚Ä¢ Publica√ß√£o de gr√°ficos de alta qualidade

    INTERFACE PRINCIPAL:
    ‚Ä¢ Project Explorer: Gerencia arquivos e pastas do projeto
    ‚Ä¢ Workbook: Planilhas para dados (similar ao Excel)
    ‚Ä¢ Graph: Janelas de gr√°ficos
    ‚Ä¢ Matrix: Dados matriciais para gr√°ficos 3D
    ‚Ä¢ Function: Editor de fun√ß√µes matem√°ticas

    CRIANDO GR√ÅFICOS B√ÅSICOS:
    1. Importar dados: File > Import > Single ASCII
    2. Selecionar colunas de dados
    3. Plot > Basic 2D > Line, Scatter, Column, etc.
    4. Personalizar: duplo clique no gr√°fico
    5. Plot Details: Controla apar√™ncia de linhas, s√≠mbolos, cores

    IMPORTA√á√ÉO DE DADOS:
    ‚Ä¢ File > Import > Single ASCII para arquivos texto
    ‚Ä¢ Import Wizard para formatos complexos
    ‚Ä¢ Suporte nativo para Excel (.xlsx)
    ‚Ä¢ Data Connector para bancos de dados

    PERSONALIZA√á√ÉO DE GR√ÅFICOS:
    ‚Ä¢ Plot Details (Ctrl+Alt+L): Controla apar√™ncia completa
    ‚Ä¢ Layer: Configura√ß√µes gerais do gr√°fico
    ‚Ä¢ Line: Estilo, cor e espessura das linhas
    ‚Ä¢ Symbol: Marcadores de pontos
    ‚Ä¢ Axis: Configura√ß√£o dos eixos

    ATALHOS √öTEIS:
    ‚Ä¢ Ctrl+Alt+L: Abre Plot Details
    ‚Ä¢ Ctrl+D: Duplica gr√°fico atual
    ‚Ä¢ Alt+2: Acesso r√°pido ao Basic 2D
    ‚Ä¢ F11: Maximiza janela ativa
    ‚Ä¢ Ctrl+J: Abre Code Builder (LabTalk)

    AN√ÅLISE ESTAT√çSTICA:
    ‚Ä¢ Statistics > Descriptive Statistics
    ‚Ä¢ Statistics > Hypothesis Testing
    ‚Ä¢ Analysis > Fitting > Linear/Nonlinear Fit
    ‚Ä¢ Analysis > Signal Processing > FFT

    PROGRAMA√á√ÉO:
    ‚Ä¢ LabTalk: Linguagem de script nativa
    ‚Ä¢ Origin C: Programa√ß√£o em C/C++
    ‚Ä¢ Python: Suporte via PyOrigin
    ‚Ä¢ Code Builder: IDE integrado
    """
    return docs_content

def create_origin_agent():
    """Cria agente Origin usando Agno"""
    try:
        from agno.agent import Agent
        from agno.models.anthropic import Claude
        
        # Carrega documenta√ß√£o
        docs = load_documentation()
        
        # Instru√ß√µes detalhadas
        instructions = f"""
        Voc√™ √© um ESPECIALISTA AVAN√áADO em Origin Software da OriginLab Corporation.

        BASE DE CONHECIMENTO:
        {docs}

        DIRETRIZES DE RESPOSTA:
        1. Use SEMPRE o conhecimento fornecido quando relevante
        2. Seja espec√≠fico e pr√°tico - forne√ßa procedimentos claros
        3. Responda em portugu√™s quando pergunta for em portugu√™s
        4. Use markdown para formata√ß√£o clara
        5. Inclua atalhos de teclado quando relevante
        6. Seja direto ao ponto, sem men√ß√µes de documenta√ß√£o
        7. Proponha workflows otimizados
        8. Sempre ofere√ßa dicas extras pr√°ticas

        ESTILO:
        - Comece direto com a explica√ß√£o
        - Use listas numeradas para passos
        - Inclua dicas importantes
        - Termine com sugest√µes √∫teis
        """
        
        # Cria agente
        agent = Agent(
            name="Origin Software Expert",
            model=Claude(id="claude-3-5-sonnet-20240620"),
            description="Especialista em Origin Software com conhecimento t√©cnico completo",
            instructions=[instructions],
            tools=[],
            markdown=True,
            debug_mode=False,
        )
        
        return agent
        
    except Exception as e:
        st.error(f"Erro ao criar agente: {e}")
        return None

def main():
    """Interface principal do Streamlit"""
    
    # T√≠tulo
    st.title("üß™ Origin Software Agent")
    st.markdown("**Assistente especializado em Origin Software da OriginLab**")
    
    # Sidebar
    with st.sidebar:
        st.header("‚öôÔ∏è Configura√ß√£o")
        
        # Configura√ß√£o da API Key
        api_key = st.text_input(
            "Anthropic API Key:",
            type="password",
            help="Insira sua chave da API do Claude"
        )
        
        if api_key:
            os.environ["ANTHROPIC_API_KEY"] = api_key
            st.success("‚úÖ API Key configurada")
        
        st.divider()
        
        # Informa√ß√µes
        st.header("üìö Sobre")
        st.markdown("""
        Este assistente pode ajudar com:
        - üìä Cria√ß√£o de gr√°ficos
        - üìà Importa√ß√£o de dados  
        - üìã An√°lise estat√≠stica
        - üîß LabTalk e Origin C
        - ‚ö° Atalhos e workflows
        """)
        
        st.divider()
        
        # Exemplos de perguntas
        st.header("üí° Exemplos")
        example_questions = [
            "Como criar um gr√°fico de dispers√£o?",
            "Como importar dados do Excel?",
            "Quais s√£o os atalhos mais √∫teis?",
            "Como fazer fitting de curvas?",
            "Como personalizar eixos?"
        ]
        
        for i, question in enumerate(example_questions):
            if st.button(f"üìã {question}", key=f"example_{i}"):
                st.session_state.selected_question = question
    
    # Chat interface
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    # Exibe mensagens
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
    
    # Input do usu√°rio
    if prompt := st.chat_input("Fa√ßa sua pergunta sobre Origin Software..."):
        process_message(prompt)
    
    # Pergunta selecionada do sidebar
    if "selected_question" in st.session_state:
        process_message(st.session_state.selected_question)
        del st.session_state.selected_question

def process_message(prompt):
    """Processa mensagem do usu√°rio"""
    
    # Verifica API Key
    if not os.environ.get("ANTHROPIC_API_KEY"):
        st.error("‚ùå Configure sua API Key do Claude no menu lateral")
        return
    
    # Adiciona mensagem do usu√°rio
    st.session_state.messages.append({"role": "user", "content": prompt})
    
    # Exibe mensagem do usu√°rio
    with st.chat_message("user"):
        st.markdown(prompt)
    
    # Processa resposta
    with st.chat_message("assistant"):
        message_placeholder = st.empty()
        
        try:
            with st.spinner("ü§î Pensando..."):
                # Cria agente
                agent = create_origin_agent()
                if not agent:
                    st.error("‚ùå Erro ao criar agente")
                    return
                
                # Gera resposta com retry
                response = None
                for attempt in range(3):
                    try:
                        response = agent.run(prompt)
                        break
                    except Exception as e:
                        if "429" in str(e) and attempt < 2:
                            st.warning(f"‚è≥ Rate limit atingido. Tentativa {attempt + 2}/3 em 2s...")
                            time.sleep(2)
                            continue
                        else:
                            raise e
                
                if not response:
                    st.error("‚ùå Falha ao gerar resposta ap√≥s 3 tentativas")
                    return
                
                # Extrai texto da resposta
                if hasattr(response, 'content'):
                    response_text = response.content
                else:
                    response_text = str(response)
                
                # Exibe resposta
                message_placeholder.markdown(response_text)
                
                # Adiciona √† sess√£o
                st.session_state.messages.append({
                    "role": "assistant", 
                    "content": response_text
                })
        
        except Exception as e:
            if "429" in str(e):
                st.error("‚ùå Limite de requisi√ß√µes excedido. Aguarde alguns minutos e tente novamente.")
                st.info("üí° Dica: O Anthropic tem limites de velocidade para contas novas. Aguarde 5-10 minutos entre requisi√ß√µes.")
            else:
                st.error(f"‚ùå Erro: {e}")

if __name__ == "__main__":
    # Verifica depend√™ncias
    try:
        import agno
        main()
    except ImportError:
        st.error("‚ùå Instale as depend√™ncias: `pip install agno anthropic streamlit`")
        st.stop()